{{#each definitions}}
### FILE _Generated/Dto/{{uppercase_first_letter @key}}.generated.cs

using System;
using System.IO;
using System.Collections.Generic;
using System.Threading.Tasks;
using FluentValidation;

namespace {{ uppercase_first_letter @root.x-product.appName}}.{{uppercase_first_letter @root.x-product.appService}}
{
    public partial class {{uppercase_first_letter @key}}
    {
{{#each properties}}
      public {{#one_line}}{{> typeSelector }} {{uppercase_first_letter @../@key}}{{/one_line}} {get; set; }
{{/each}}

//      public override bool Equals(object obj)
//        {
//            return obj is {{uppercase_first_letter @key}} && obj.GetHashCode() == GetHashCode();
//        }

//      public override int GetHashCode()
//       {
//           unchecked
//            {
//                var hashCode = nameof({{uppercase_first_letter @key}}).GetHashCode();
{{#each properties}}
//                if (default != {{uppercase_first_letter @key}}) hashCode = (hashCode * 397) ^ {{uppercase_first_letter @key}}.GetHashCode();
{{/each}}
//                return hashCode;
//            }
//        }
    }

    public abstract class {{uppercase_first_letter @key}}ValidatorBase : AbstractValidator<{{uppercase_first_letter @key}}>
    {
    public {{uppercase_first_letter @key}}ValidatorBase()
    {
    {{#each required}}
    {{#each ../properties}}
    {{#if_equals this.@key ../}}
    {{#if_equals this.type 'string'}}
    RuleFor(dto => dto.{{uppercase_first_letter @key}}).NotNull().NotEmpty().WithMessage("{{uppercase_first_letter @key}} is required");
    {{else}}
    RuleFor(dto => dto.{{uppercase_first_letter @key}}).NotNull().WithMessage("{{uppercase_first_letter @key}} is required");
    {{/if_equals}}
    {{/if_equals}}
    {{/each}}
    {{/each}}
    }
    }

    }



    {{/each}}

